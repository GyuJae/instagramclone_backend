// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  username     String        @unique
  password     String
  avatar       String?
  role         Role          @default(USER)
  followers    User[]        @relation("FollowRelation")
  followings   User[]        @relation("FollowRelation")
  posts        Post[]
  likes        Like[]
  comments     Comment[]
  messageRooms MessageRoom[]
  messages     Message[]
}

enum Role {
  USER
  ADMIN
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  files     File[]
  caption   String?
  hashtags  Hashtag[]
  likes     Like[]
  comments  Comment[]
}

model File {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  posterPath String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hashtag   String   @unique
  posts     Post[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@unique([userId, postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  payload   String
}

model MessageRoom {
  id        Int       @id @default(autoincrement())
  users     User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  payload   String
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  room      MessageRoom @relation(fields: [roomId], references: [id])
  roomId    Int
  read      Boolean     @default(false)
}
